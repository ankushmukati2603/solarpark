<?php

namespace App\Http\Controllers;

use App\Models\Mnre;
use App\Models\Otp;
use App\Models\State;
use App\Models\District;
use App\Models\Energy;
use App\Models\Discom;
use App\Models\SolarProject;
use App\Models\DeveloperDetails;
use App\Models\AuditTrail;
use App\Models\StateImplementingAgencyUser;
use App\Models\LocalbodyUser;
use App\Models\Installer;
use App\Models\Inspector;
use App\Traits\General;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Session, Hash, DB;
use PDF;

class ResetPassController extends Controller
{
    use General; //To use Traits
   
    public function sendOtpToUser(Request $request)
    {
        
        if($request->isMethod('get')){
            $auditData = array('action_type'=>'1','description'=>'View Forget Password Page', 'user_type'=>0);
            $this->auditTrail($auditData);
            return view('reset_password');
        }
        
        # code...
        // $SixDigitRandomNumber = rand(100000,999999);
        // echo $SixDigitRandomNumber;die;
        try{
            $validatedData = $request->validate([
                'email'=>'required',
            ]);
            $isValidUser=true;
            
            $email = $request->input('email');
            $phone=$request->input('phone');
            $user_type = $request->input('user_type');
            Otp::where('otp_title', $email)->delete(); // pichle otp ko otp table se delete kr rahe h 
            
            Session::put('user_type', $user_type);// key-> koi bhi variable le sakte h , value-> jo request k time variable liya vahi add krna h
            Session::put('email', $email);
            if($user_type == 'MNRE'){
                $mnre=Mnre::where('email',$email)->get()->first() ;
                if($mnre==null){
                    $isValidUser=false;
                }
            }if($user_type == 'STATEIMPLEMENTINGAGENCY'){
                
                $stateimplementagency=StateImplementingAgencyUser::where('email',$email)->where('phone',$phone)->get()->first();
                if($stateimplementagency==null){
                    $isValidUser=false;
                }
            }if($user_type == 'LOCALBODY'){
    
                $localbody=LocalbodyUser::where('email',$email)->where('phone',$phone)->get()->first();
                if($localbody==null){
                    $isValidUser=false;
                }
            }if($user_type == 'INSTALLER'){
                
                $intaller=Installer::where('email',$email)->where('phone',$phone)->get()->first();
                if($intaller==null){
                    $isValidUser=false;
                }
            }if($user_type == 'INSPECTOR'){
                
                $inspector=Inspector::where('email',$email)->where('phone',$phone)->get()->first();
                if($inspector==null){
                    $isValidUser=false;
                }
            }
            if($isValidUser){
                //OTP Send to Email
                
                $otpEmail = $this->generateOtp();
                
                
                
                $otpDataEmail= new Otp();
                $otpDataEmail->otp_title=$email;
                $otpDataEmail->otp=$otpEmail;
                $otpDataEmail->otp_type='E';
                $otpDataEmail->save();
                
                // $data['unique_id'] = $uniqueId;
                // $data['agency_name'] = $agencyName; // $data m koi si b value jo hame chahiye vo dal skte hain
                // $data['otp'] = $otpEmail;
                // $this->sendMail('notifyResetPasswordOTP', $data, $email, 'otp to reset your password');//subject=subject line like email
                // email function use kena hai
                if($user_type != 'MNRE'){
                    //OTP Send to Phone
                    $deletePhone= Otp::where('otp_title', $phone)->delete();//phone ke purane otp details ko otps table se delete krna hai 
                    Session::put('phone', $phone);
                    $otpPhone=$this->generateOtp();

                    // $otpMessage = "Dear User,".$otpPhone." is your otp to reset password";
                    // $this->sendSandesOTP($mobile,$message);

                    $otpDataPhone= new Otp();
                    $otpDataPhone->otp_title=$phone;
                    $otpDataPhone->otp=$otpPhone;
                    $otpDataPhone->otp_type='P';
                    $otpDataPhone->save();
                }
                
                /*************************Audit Trail Start**********************************/
                $auditData = array('action_type'=>'2','description'=>' OTP Generated by User','user_type'=>'1');
                $this->auditTrail($auditData);
                /*************************Audit Trail End**********************************/
                return redirect('verify-otp')->with("message","OTP Generate Successfuly !");
            }else{
                //invalid user
                /*************************Audit Trail Start**********************************/
                $auditData = array('action_type'=>'2','description'=>'User entered Invalid login id '.$email);
                $this->auditTrail($auditData);
                /*************************Audit Trail End**********************************/
                return redirect('reset-user-password')->with("error","User Invalid !");
            }
           
        }catch(Exception $ex){
            dd($ex->getMessage());
        }
        
       
    }
    

/***************change method combined use get & post**************/




    // public function verifyOtp(){
    //     //$value = session('email');
    //     //dd($value);
    //     // $value = session('user_type');
    //     //dd($value);
    //     return view('verifyOtpForm');
    // }
    public function checkOtp(Request $request)
    { 
        if($request->isMethod('get')){
            /**************Start Audit trail************/
            $auditData = array('action_type'=>1,'description'=>'Viewed Page verify OTP by User','user_type'=>0);
            $this->auditTrail($auditData);
            /**************End Audit trail************/
            return view('verifyOtpForm');
        }
        $validatedData = $request->validate([
            'email'=>'required',
            
        ]);
        $email = session('email');
        $user_type= session('user_type');
        
        $emailotp=$request->input('email');//form m user request s aa rha hai
        $emailData=Otp::where('otp',$emailotp)->where('otp_title',$email)->count();

        if($user_type != 'MNRE'){
            $phone = session('phone');
            $phoneotp=$request->input('phone');
            $phoneData=Otp::where('otp',$phoneotp)->where('otp_title',$phone)->count();
            if($emailData>0 && $phoneData >0){
            /**************Start Audit trail************/
            $auditData = array('action_type'=>1,'description'=>'OTP Vertified by User','user_type'=>0);
            $this->auditTrail($auditData);
            /**************End Audit trail************/
            return redirect('/change-password')->with('OTP Verified');
           }else{
            /**************Start Audit trail************/
            $auditData = array('action_type'=>1,'description'=>'OTP not Vertified by User','user_type'=>0);
            $this->auditTrail($auditData);
            /**************End Audit trail************/
            return redirect('/verify-otp')->with('OTP mismatch');
           }
        }else{
            if($emailData>0){
                /**************Start Audit trail************/
                $auditData = array('action_type'=>1,'description'=>'OTP Vertified by User','user_type'=>0);
                $this->auditTrail($auditData);
                /**************End Audit trail************/
                return redirect('/change-password')->with("message" ,"OTP Verified");
            }else{
                /**************Start Audit trail************/
                $auditData = array('action_type'=>1,'description'=>'OTP not Vertified by User','user_type'=>0);
                $this->auditTrail($auditData);
                /**************End Audit trail************/
                return redirect('/verify-otp')->with("message" , "OTP mismatch");
            }
        }
    }
public function updatePassword(Request $request){
    
    if($request->isMethod('get')){
        /**************Start Audit trail************/
        $auditData = array('action_type'=>1,'description'=>' Changed password Page','user_type'=>0);
        $this->auditTrail($auditData);
        /**************End Audit trail************/
        return view('change-password');
    }
    $validatedData=$request->validate([

        'password'=>'required',
        'confirm-password'=>'required',
    ]);
    $password=$request->input('password');
    $confirmPassword=$request->input('confirm-password');
    
    if($password == $confirmPassword){
        $email = session('email');
        $user_type = session('user_type');
        if($user_type == 'MNRE'){
            $mnreData=Mnre::where('email',$email)->get()->first();
            if($mnreData != null){
                $mnre=Mnre::find($mnreData->id);
                $mnre->password = Hash::make($password);
                $mnre->update();
                /**************Start Audit trail************/
                $auditData = array('action_type'=>'3','description'=>'Password Update Successfuly','user_type'=>'1');
                $this->auditTrail($auditData);
                /**************End Audit trail************/
                //dd($mnre);
                return redirect('/login')->with('message' , 'Password Update Successfuly');
            }
        }else if($user_type == 'INSTALLER'){
            $get_installer=Installer::where('email',$email)->get()->first();
            if($get_installer != null){
                $installer=Installer::find($get_installer->id);
                $installer->password= Hash::make($password);
                $installer->update();
                /**************Start Audit trail************/
                $auditData = array('action_type'=>'3','description'=>' Changed password','user_type'=>'4');
                $this->auditTrail($auditData);
                /**************End Audit trail************/
                return redirect('/login')->with('message', 'Password Update Successfuly');
            }
        }else if($user_type == 'STATEIMPLEMENTINGAGENCY'){
            $stateimplementagencyData=StateImplementingAgencyUser::where('email',$email)->get()->first();
            if($stateimplementagencyData != null){
                $stateimplementagency=stateImplementingAgencyUser::find($stateimplementagencyData->id);
                $stateimplementagency->password= Hash::make($password);
                $stateimplementagency->update();
                /**************Start Audit trail************/
                $auditData = array('action_type'=>'3','description'=>'User Changed password','user_type'=>'2');
                $this->auditTrail($auditData);
                /**************End Audit trail************/
                return redirect('/login')->with('message', 'Password Update Successfuly');
            }
        }else if($user_type == 'LOCALBODY'){
            $localbodyData=LocalbodyUser::where('email',$email)->get()->first();
            if($localbodyData != null){
                $localbody=LocalbodyUser::find($localbodyData->id);
                $localbody->password= Hash::make($password);
                $localbody->update();
                /**************Start Audit trail************/
                $auditData = array('action_type'=>'3','description'=>'User Changed password','user_type'=>'3');
                $this->auditTrail($auditData);
                /**************End Audit trail************/
                return redirect('/login')->with('message', 'Password Update Successfuly');
            }
        }else if ($user_type == 'INSPECTOR'){
            $inspectorData= Inspector::where('email',$email)->get()->first();
             
            if($inspectorData != null){
                $inspector=Inspector::find($inspectorData->id);
                $inspector->password=Hash::make($password);
                $inspector->update();
                /**************Start Audit trail************/
                $auditData = array('action_type'=>'3','description'=>'User Changed passward','user_type'=>'5');
                $this->auditTrail($auditData);
                /**************End Audit trail************/
                return redirect('/login')->with('message', 'Password Update Successfuly');
            }
        }
    }else{
        /**************Start Audit trail************/
        $auditData = array('action_type'=>'3','description'=>'User Changed passward','user_type'=>0);
        $this->auditTrail($auditData);
        /**************End Audit trail************/
        return redirect('/change-password')->with( "message" ,'Password not matched');
    }
}
public function almmForm(){
    return view('almmForm');

}
public function almmPdfForm(Request $request){
    {
        // $items = AuditTrail::all();
        // view()->share('items',$items);
        // $pdf = PDF::loadView('almmPdfForm');
        // return $pdf->download('almmPdfForm.pdf');
        // if($request->has('download')){
           
        // }
        return view('almmPdfForm');
    }
}
// public function almmPdfForm(Request $request){
  
//     if($request->file('file')) 
//     {
//         $file = $request->file('file');
//         $filename = time() . '.' . $request->file('file')->extension();
//         $filePath = public_path() . '/files/uploads/';
//         $file->move($filePath, $filename);
//     }
// }
// public function pdfview(Request $request)
//     {
//         $items = DB::table("items")->get();
//         view()->share('items',$items);


//         if($request->has('download')){
//             $pdf = PDF::loadView('almmPdfForm');
//             return $pdf->download('almmPdfForm.pdf');
//         }


//         return view('almmPdfForm');
//     }

public function developerData(Request $request, $id=NULL){
    if($request->isMethod('post')){
        
        // $sub=substr($request->input('name_of_developer'),0,4);
        // $number=substr($request->input('contact_no'),6);
        // $developer_id = $sub.'/'.$number;
        
        if(!empty($request->editId)){
            $validatedData = $request->validate([
            
                'name_of_developer'=>'required',
                'address'=>'required',
                'contact_person_name'=>'required',
                'state_id'=>'required',
                'district_id'=>'required',
                'energy_id' =>'required',
            ]);
            $developer = DeveloperDetails::find($request->editId);
            
           
            // echo "hi";
            // dd($developer);
        }else{
            $validatedData = $request->validate([
            
                'name_of_developer'=>'required',
                'address'=>'required',
                'contact_person_name'=>'required',
                'contact_no'=>'required | unique:developer_details',
                'email'=>'required |unique:developer_details',
                'state_id'=>'required',
                'district_id'=>'required',
                'energy_id' =>'required',
            
            ]);
            $developer = new DeveloperDetails;
            // $developer->developer_id= $developer_id;
            $developer->email=$request->input('email');
            $developer->contact_no=$request->input('contact_no');
        }
        $developer->name_of_developer=$request->input('name_of_developer');
        $developer->address=$request->input('address');
        $developer->contact_person_name=$request->input('contact_person_name');
        
        
        $developer->state_id=$request->input('state_id');
        $developer->district_id=$request->input('district_id');
        $developer->energy_id=$request->input('energy_id');
        // dd($developer);
        $developer->save();
        
        return redirect('/developerData')->with('message', 'Details saved !'); 
    }
    
    $stateData=State::orderby("name")->get();
    $districtData=District::orderby("name")->get();
    $energyData=Energy::all();
    $result=array();
    if(!empty($id)){
        $result = DeveloperDetails::where('id',$id)->first();
    }
    // if(!empty($delete_id)){
    //     dd($delete_id);
    //     $developer=DeveloperDetails::where('id',$delete_id)->delete(); 
    //     return redirect('/developerData')->with('message', 'Details deleted !'); 
      
    // }
    return view('solar_power',compact('stateData','districtData','energyData','result'));
}
// public function ditrictList($state_id){
//     dd('Hello');
// }

public function viewDeveloperData(){
    $userDetail=DeveloperDetails::all();
    return view('viewDeveloperData', compact('userDetail'));
}
public function deleteDeveloperData($delete_id){

    $developer=DeveloperDetails::where('id',$delete_id)->delete();
     
    return redirect('/developerData')->with('error', ' Detail Deleted!');
}
 /*********************2nd form***********************/
public function solarProjectData(Request $request ){
    
    if($request->isMethod('get')){
        $solarData = SolarProject::getSolarData();
        //dd($solarData);
        $developer=DeveloperDetails::select('id','name_of_developer')->get();
        // using the select we can directly fatch value from table with calumn name
        $discomData=Discom::select('id','discom_name')->get();
        $energyData=Energy::all();
        return view('solarPark', compact('developer','discomData','energyData'));
    }
    $developer=DeveloperDetails::select('id','name_of_developer','state_id','district_id')->where('id',$request->input('developer_id'))->get()->first();
    
    $validatedData = $request->validate([
        'developer_id'=>'required',
        'shareholding'=>'required',
        'latitude'=>'required',
        'longitude'=>'required',
        'area_of_land_holding'=>'required',
        'type_project'=>'required',
        'tarrif'=>'required',
        'capacity'=>'required',
        'discom_id'=>'required',
        'quantam_of_sale_of_power'=>'required',
        'ppa_tenure'=>'required',
    ]);
    $prefix=substr($developer->name_of_developer,0,4);
    $number=rand(1,999);
    $value = $prefix.$request->input('energy_id').$number.$request->input('developer_id');
    $data=New SolarProject();
    $data->unique_id= $value;
    $data->developer_id=$request->input('developer_id');
    $data->shareholding=$request->input('shareholding');
    $data->latitude=$request->input('latitude');
    $data->longitude=$request->input('longitude');
    $data->area_of_land_holding=$request->input('area_of_land_holding');
    $data->type_project=$request->input('type_project');
    $data->tarrif=$request->input('tarrif');
    $data->capacity=$request->input('capacity');
    $data->energy_id=$request->input('energy_id');
    $data->discom_id=$request->input('discom_id');
    $data->state_id=$developer->state_id;
    // without request via form we also can enter value like that but before use we have to define . lin this var. before get method variable defined
    $data->district_id=$developer->district_id;
    $data->quantam_of_sale_of_power=$request->input('quantam_of_sale_of_power');
    $data->ppa_tenure=$request->input('ppa_tenure');
    $data->start_of_ppa=$request->input('start_of_ppa');
    $data->save();
    //dd($data);

    return redirect('/solarProjectData')->with('message', 'Details saved !'); 
}

public function viewsolarData(){
    $userData=SolarProject::getSolarData();
    //dd($userData);
    return view('viewsolarData', compact('userData'));
 }
 public function submissionForm(){
    return view('annexure1');
 }
 public function annexure3Form(){
    return view('annexure3');
 }
 public function annexure4Form(){
    return view('annexure4');
 }
 public function arrayTest(){
    // $array=array('a','b','c','d');
    // foreach($array as $data){
    //     echo $data. "<br>" ;
    // }
    // echo $array[0];
    //dd();

echo date("Y M d H:i:s l");



    $arrayasso=array(
        "a"=>"1",
        "b"=>"2",
        "c"=>"3"
    );
    foreach($arrayasso as $key=>$value){
        echo $key. '='.$value. "<br>" ;
    }
    $colors = array("red", "green", "blue", "yellow"); 
          
    
    echo sort($colors);
    $colors = array("red", "green", "blue", "yellow");

    dd();
 }
//  public function homePageDesign(){
//     return view('homePageDesign');
//  }

}